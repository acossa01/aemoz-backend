version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: aemoz_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aemoz_db
      POSTGRES_USER: aemoz_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aemoz_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
      - ./scripts/seed.sql:/docker-entrypoint-initdb.d/02_seed.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - aemoz_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aemoz_user -d aemoz_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: aemoz_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass_2024}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - aemoz_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Aplicação Backend
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: aemoz_backend
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://aemoz_user:${DB_PASSWORD:-aemoz_secure_2024}@postgres:5432/aemoz_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_pass_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-aemoz2025}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-15}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aemoz_network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: aemoz_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - aemoz_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  aemoz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---
# docker-compose.dev.yml - Para desenvolvimento
version: '3.8'

services:
  postgres_dev:
    image: postgres:15-alpine
    container_name: aemoz_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: aemoz_db_dev
      POSTGRES_USER: aemoz_dev
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    networks:
      - aemoz_dev_network

  redis_dev:
    image: redis:7-alpine
    container_name: aemoz_redis_dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - aemoz_dev_network

volumes:
  postgres_dev_data:

networks:
  aemoz_dev_network:
    driver: bridge